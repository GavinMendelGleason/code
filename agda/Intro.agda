module Intro where 

open import Level

data โฅ : Set where

ยฌ : โ {โ} โ Set โ โ Set โ 
ยฌ A = A โ โฅ 

proof : ยฌ โฅ 
proof = ฮป z โ z

notbot : โฅ โ โฅ 
notbot ()

data โค : Set where 
  tt : โค 

notnottrue : ยฌ (ยฌ โค)
notnottrue p = p tt  -- C-c C-a

record ฮฃ {a b} (A : Set a) (B : A โ Set b) : Set (a โ b) where 
  constructor 
    _,_
  field 
    ฯโ : A
    ฯโ : B ฯโ 
    
syntax ฮฃ A (ฮป x โ B) = โ[ x โถ A ] B

_ร_ : โ {a b} (A : Set a) (B : Set b) โ Set (a โ b) 
A ร B = โ[ x โถ A ] B 

data _โ_ {a b} (A : Set a) (B : Set b) : Set (a โ b) where 
  inl : (x : A) โ A โ B 
  inr : (y : B) โ A โ B 

data โ : Set where 
  โ : โ 
  1+ : โ โ โ 

one = 1+ โ
two = 1+ one
three = 1+ two

-- C-c C-n

data _โคโ_ : โ โ โ โ Set where
  โโค : โ (n : โ) โ โ โคโ n 
  1+โค : โ (n m : โ) โ n โคโ m โ (1+ n) โคโ (1+ m)

_โคโdec_ : โ x y โ (x โคโ y) โ (y โคโ x)
โ โคโdec y = inl (โโค y) -- C-c C-a
1+ x โคโdec โ = inr (โโค (1+ x))
1+ x โคโdec 1+ y with x โคโdec y 
1+ x โคโdec 1+ y | inl p = inl (1+โค x y p)
1+ x โคโdec 1+ y | inr p = inr (1+โค y x p) 


data ๐น : Set where 
  true : ๐น 
  false : ๐น

_โค_ : โ โ โ โ ๐น 
โ โค y = true
1+ x โค โ = false
1+ x โค 1+ y = x โค y 

โฅ_โฅ : ๐น โ Set
โฅ true โฅ = โค 
โฅ false โฅ = โฅ

โคโโคโ : โ x y โ โฅ (x โค y) โฅ โ (x โคโ y)
โคโโคโ โ y p = โโค y
โคโโคโ (1+ x) โ ()
โคโโคโ (1+ x) (1+ y) p = 1+โค x y (โคโโคโ x y p) 

โคโโโค : โ x y โ (x โคโ y) โ โฅ (x โค y) โฅ
โคโโโค .โ y (โโค .y) = tt
โคโโโค .(1+ n) .(1+ m) (1+โค n m p) = โคโโโค n m p 

data _โก_ {โ} {A : Set โ} : A โ A โ Set โ where 
  refl : โ {x} โ x โก x

data โฆ_โง (A : Set) : Set where 
  ฮต : โฆ A โง 
  _โท_ : A โ โฆ A โง โ โฆ A โง 

[_] : โ {A : Set} โ A โ โฆ A โง 
[ x ] = x โท ฮต

_++_ : โ {A : Set} โ โฆ A โง โ โฆ A โง โ โฆ A โง  
ฮต ++ y = y
(x โท xโ) ++ y = x โท (xโ ++ y) 

example : โฆ โ โง 
example = one โท (two โท ฮต)

-- C-c C-n

example2 : โฆ โ โง 
example2 = example ++ example

-- Decidable TO
record TO (A : Set) : Setโ where 
  constructor 
    makeTO
  field 
    _โคA_ : A โ A โ Set
    reflโค : โ x โ x โคA x
    antiโค : โ {x y} โ x โคA y โ y โคA x โ x โก y
    transโค : โ {x y z} โ x โคA y โ y โคA z โ x โคA z
    _โคdec_ : โ x y โ (x โคA y) โ (y โคA x)
    
โSorts : TO โ 
โSorts = makeTO _โคโ_ reflโคโ antiโคโ transโคโ _โคโdec_
  where reflโคโ : (x : โ) โ x โคโ x 
        reflโคโ โ = โโค โ
        reflโคโ (1+ x) = 1+โค x x (reflโคโ x) 
        antiโคโ : {x y : โ} โ x โคโ y โ y โคโ x โ x โก y
        antiโคโ (โโค .โ) (โโค .โ) = refl
        antiโคโ (1+โค n m p) (1+โค .m .n q) with antiโคโ p q
        antiโคโ (1+โค .m m p) (1+โค .m .m q) | refl = refl
        transโคโ : {x y z : โ} โ x โคโ y โ y โคโ z โ x โคโ z
        transโคโ (โโค .โ) (โโค z) = โโค z
        transโคโ (โโค .(1+ n)) (1+โค n m q) = โโค (1+ m) -- C-c C-a
        transโคโ (1+โค n m p) (1+โค .m mโ q) with transโคโ p q  
        transโคโ (1+โค n m p) (1+โค .m mโ q) | res = 1+โค n mโ res 

