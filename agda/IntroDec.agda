module IntroDec where 

open import Level

data โฅ : Set where 
  
ยฌ : โ {โ} โ Set โ โ Set โ
ยฌ A = A โ โฅ 

data โค : Set where 
  tt : โค 

notnottrue : ยฌ (ยฌ โค)
notnottrue = ฮป x โ x tt 

notfalse : ยฌ โฅ 
notfalse p = p

record ฮฃ {a b} (A : Set a) (B : A โ Set b) : Set (a โ b) where 
  constructor 
    _,_
  field 
    ฯโ : A
    ฯโ : B ฯโ

syntax ฮฃ A (ฮป x โ B) = โ[ x โถ A ] B

_ร_ : โ {a b} (A : Set a) (B : Set b) โ Set (a โ b)
A ร B = โ[ x โถ A ] B

data Dec {a} (P : Set a) : Set a where 
  yes : (p : P) โ Dec P
  no : (ยฌp : ยฌ P) โ Dec P

data _โ_ {a b} (A : Set a) (B : Set b) : Set (a โ b) where
  inl : (x : A) โ A โ B
  inr : (y : B) โ A โ B
 
data โ : Set where 
  โ : โ
  1+ : โ โ โ

one = 1+ โ 
two = 1+ one
three = 1+ two

data _โคโ_ : โ โ โ โ Set where 
  โโค : โ x โ โ โคโ x
  1+โค : โ x y โ x โคโ y โ (1+ x) โคโ (1+ y)

_โคโdec_ : โ x y โ Dec (x โคโ y)
โ โคโdec y = {!!}
1+ x โคโdec โ = {!!}
1+ x โคโdec 1+ y with x โคโdec y 
1+ x โคโdec 1+ y | res = {!!}

data ๐น : Set where 
  true : ๐น
  false : ๐น

_โค_ : โ โ โ โ ๐น 
โ โค y = true
1+ x โค โ = false
1+ x โค 1+ y = x โค y 

โฅ_โฅ : ๐น โ Set 
โฅ true โฅ = โค 
โฅ false โฅ = โฅ

โคโโคโ : โ x y โ โฅ (x โค y) โฅ โ (x โคโ y)
โคโโคโ โ y p = โโค y
โคโโคโ (1+ x) โ ()
โคโโคโ (1+ x) (1+ y) p = 1+โค x y (โคโโคโ x y p)

โคโโโค : โ x y โ (x โคโ y) โ โฅ (x โค y) โฅ 
โคโโโค .โ y (โโค .y) = tt
โคโโโค .(1+ x) .(1+ y) (1+โค x y p) = โคโโโค x y p 

_โคdec_ : โ โ โ โ ๐น
x โคdec y with (x โคโdec y)
x โคdec y | yes p = true
x โคdec y | no ยฌp = false

data _โก_ {โ} {A : Set โ} : A โ A โ Set โ where 
  refl : โ {x} โ x โก x

1+โก : โ {x y} โ x โก y โ (1+ x) โก (1+ y)
1+โก refl = refl 

data โฆ_โง (A : Set) : Set where 
  ฮต : โฆ A โง
  _โท_ : A โ โฆ A โง โ โฆ A โง 

[_] : โ {A : Set} โ A  โ โฆ A โง
[ x ] = x โท ฮต

_++_ : โ {A : Set} โ โฆ A โง โ โฆ A โง โ โฆ A โง
ฮต ++ lโ = lโ
(x โท lโ) ++ lโ = x โท (lโ ++ lโ)

example : โฆ โ โง
example = one โท (two โท ฮต)

example2 : โฆ โ โง 
example2 = example ++ example

record PO (A : Set) : Setโ where 
  constructor 
    makePO 
  field 
    _โคA_ : A โ A โ Set
    reflโค : โ x โ x โคA x
    antiโค : โ {x y} โ x โคA y โ y โคA x โ x โก y
    transโค : โ {x y z} โ x โคA y โ y โคA z โ x โคA z
    _โคAdec_ : โ x y โ Dec (x โคA y)

_โ_ : โ {โ} {A B C : Set โ} โ (B โ C) โ (A โ B) โ A โ C
f โ g = ฮป x โ f (g x)

โSorts : PO โ
โSorts = record { _โคA_ = _โคโ_; reflโค = reflโคโ; antiโค = antiโคโ; transโค = transโคโ; _โคAdec_ = _โคโdec_ } 
  where reflโคโ : โ (x : โ) โ x โคโ x
        reflโคโ โ = โโค โ
        reflโคโ (1+ x) = 1+โค x x (reflโคโ x) 
        antiโคโ : โ {x y} โ x โคโ y โ y โคโ x โ x โก y 
        antiโคโ (โโค .โ) (โโค .โ) = refl
        antiโคโ (1+โค x y p) (1+โค .y .x q) with antiโคโ p
        antiโคโ (1+โค x y p) (1+โค .y .x q) | r = (1+โก โ r) q
        transโคโ : โ {x y z : โ} โ x โคโ y โ y โคโ z โ x โคโ z
        transโคโ (โโค .โ) (โโค z) = โโค z
        transโคโ (โโค .(1+ x)) (1+โค x y q) = โโค (1+ y)
        transโคโ (1+โค x y p) (1+โค .y z q) with transโคโ p q 
        transโคโ (1+โค x y p) (1+โค .y z q) | r = 1+โคโ x z r
          where 1+โคโ : (x y : โ) โ x โคโ y โ (1+ x) โคโ (1+ y)
                1+โคโ x y p = 1+โค x y p

data ! : {A : Set} โ โฆ A โง โ โฆ A โง โ Setโ where 
  !empty : โ {A : Set} โ ! {A} ฮต ฮต
  !skip : โ {A : Set} {x : A} {lโ lโ} โ ! lโ lโ โ ! (x โท lโ) (x โท lโ) 
  !swap : โ {A : Set} {x y : A} {l} โ ! (x โท (y โท l)) (y โท (x โท l))
  !trans : โ {A : Set} {lโ lโ lโ : โฆ A โง } โ ! lโ lโ โ ! lโ lโ โ ! lโ lโ

!refl : โ {A : Set} โ {l : โฆ A โง} โ ! l l
!refl {A} {ฮต} = !empty
!refl {A} {x โท l} = !skip !refl 

!moveone : โ {A} โ (x : A) โ (lโ lโ : โฆ A โง) โ ! ([ x ] ++ (lโ ++ lโ)) (lโ ++ ([ x ] ++ lโ))
!moveone x ฮต lโ = !refl
!moveone x (xโ โท lโ) lโ with !moveone x lโ lโ
!moveone x (xโ โท lโ) lโ | res = !trans !swap (!skip res) 

!insert : โ {A} (x : A) (l lโ lโ : โฆ A โง)  โ ! l (lโ ++ lโ) โ ! (x โท l) (lโ ++ ([ x ] ++ lโ))
!insert x l lโ lโ p = !trans (!skip p) (!moveone x lโ lโ)

data Forall  {A : Set} (R : A โ Set) : โฆ A โง โ Set where 
  Forallฮต : Forall R ฮต 
  Forallโท : โ {a l} โ Forall R l โ R a โ Forall R (a โท l)

record Sorting : Setโ where 
  field 
    A : Set
    po : PO A
  
  open PO po

  data Sorted : โฆ A โง โ Set where 
    Sortedฮต : Sorted ฮต
    Sortedโท : โ {l} {a} โ Sorted l โ Forall (ฮป x โ a โคA x) l โ Sorted (a โท l)

  insert : A โ โฆ A โง โ โฆ A โง
  insert x ฮต = [ x ]
  insert x (y โท l) with x โคAdec y
  insert x (y โท l) | yes p = x โท (y โท l)
  insert x (y โท l) | no q = y โท insert x l

  insertionSort : โฆ A โง โ โฆ A โง
  insertionSort ฮต = ฮต
  insertionSort (x โท l) = insert x (insertionSort l)

  forallSortTrans : โ {x a : A} โ (l : โฆ A โง) โ (x โคA a) โ Sorted (a โท l) โ Forall (_โคA_ x) l
  forallSortTrans .ฮต le (Sortedโท s Forallฮต) = Forallฮต
  forallSortTrans .(aโ โท l) le (Sortedโท s (Forallโท {aโ} {l} xโ xโ)) with transโค le xโ 
  forallSortTrans .(aโ โท l) le (Sortedโท s (Forallโท {aโ} {l} xโ xโ)) | res = Forallโท (forallSortTrans l res s) res 

  safeOnTop : โ {x a} lโ lโ โ (a โคA x) โ Forall (_โคA_ a) (lโ ++ lโ) โ Sorted (lโ ++ (x โท lโ)) โ Sorted (a โท (lโ ++ (x โท lโ)))
  safeOnTop {x} {a} ฮต lโ rev f (Sortedโท s xโ) = Sortedโท (Sortedโท s xโ) (Forallโท f rev)
  safeOnTop {x} {a} (xโ โท lโ) lโ nle (Forallโท f xโ) s with forallSortTrans (lโ ++ ([ x ] ++ lโ)) xโ s
  safeOnTop {x} {a} (xโ โท lโ) lโ nle (Forallโท f xโ) s | res = Sortedโท s (Forallโท res xโ)

  safeOnTopNeg : โ {x a} lโ lโ โ ยฌ (x โคA a) โ Forall (_โคA_ a) (lโ ++ lโ) โ Sorted (lโ ++ (x โท lโ)) โ Sorted (a โท (lโ ++ (x โท lโ)))
  safeOnTopNeg {x} {a} ฮต lโ nle f s with a โคAdec x
  safeOnTopNeg {x} {a} ฮต lโ nle f s | res = {!!} 
  safeOnTopNeg {x} {a} (xโ โท lโ) lโ nle (Forallโท f xโ) s with forallSortTrans (lโ ++ ([ x ] ++ lโ)) xโ s
  safeOnTopNeg {x} {a} (xโ โท lโ) lโ nle (Forallโท f xโ) s | res = Sortedโท s (Forallโท res xโ)

    
  split : (lโ : โฆ A โง) โ (x : A) โ Sorted lโ โ 
    โ[ lโ โถ โฆ A โง ] โ[ lโ โถ โฆ A โง ] ((lโ โก (lโ ++ lโ)) ร Sorted (lโ ++ ([ x ] ++ lโ)))
  split .ฮต x Sortedฮต = ฮต , (ฮต , (refl , Sortedโท Sortedฮต Forallฮต))
  split (a โท l) x s             with x โคAdec a 
  split (a โท l) x s              | yes p = ฮต , ((a โท l) , (refl , Sortedโท s (Forallโท (forallSortTrans l p s) p)))
  split (a โท l) x (Sortedโท s xโ)  | no q with split l x s
  split (a โท .(lโ ++ lโ)) x (Sortedโท s xโ) | no q | lโ , (lโ , (refl , s')) = (a โท lโ) , (lโ , (refl , safeOnTopNeg lโ lโ q xโ s'))

  insertionSortStrong : (lโ : โฆ A โง) โ โ[ lโ โถ โฆ A โง ] (Sorted lโ ร ! lโ lโ)
  insertionSortStrong ฮต = ฮต , (Sortedฮต , !empty)
  insertionSortStrong (x โท l) with insertionSortStrong l
  insertionSortStrong (x โท l) | lโ , (s , p) with split lโ x s
  insertionSortStrong (x โท l) | .(ฯโ ++ ฯโ) , (s , p) | ฯโ , (ฯโ , (refl , ฯโ)) = (ฯโ ++ ([ x ] ++ ฯโ)) , (ฯโ , !insert x l ฯโ ฯโ p) 

