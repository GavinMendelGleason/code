module RDFParser where

open import RDF hiding (‚ä§)

open import Coinduction
open import Data.Char as Char using (Char ; _==_ ; show)
open import Data.List hiding (_++_)
open import Data.Nat
open import Data.Unit
open import Data.Bool
open import Data.Sum
open import Data.Product
open import Data.String as String using (String ; _++_)
open import Function
open import Relation.Binary.PropositionalEquality as P using (_‚â°_)

open import TotalParserCombinators.BreadthFirst
open import TotalParserCombinators.Lib
open import TotalParserCombinators.Parser
open import Data.Maybe
open import Data.Nat.Show renaming (show to show‚Ñï)
open import Data.Bool.Show renaming (show to showùîπ)

open Token Char Char._‚âü_

comment : Parser Char ‚ä§ _
comment =
  tok '#'                  >>= Œª _ ‚Üí
  sat‚Ä≤ (not ‚àò ('\n' ==_)) ‚ãÜ >>= Œª _ ‚Üí
  tok '\n'                 >>= Œª _ ‚Üí
  return tt

isSpace : Char ‚Üí Bool
isSpace c = (c == ' ') ‚à® (c == '\t') ‚à® (c == '\n') ‚à® (c == '\r')

dataChar : Parser Char Char _
dataChar = sat (Œª c ‚Üí if isSpace c ‚à® (c == '"') then nothing else just c)

pointChar : Parser Char Char _
pointChar = sat (Œª c ‚Üí if isSpace c ‚à® (c == '>') then nothing else just c)

match : String ‚Üí Parser Char ‚ä§ _
match str = matchAuxOne (String.toList str)
  where matchAux : Char ‚Üí List Char ‚Üí Parser Char ‚ä§ _
        matchAux x [] = tok x >>= Œª _ ‚Üí return tt
        matchAux x (y ‚à∑ l) = tok x >>= Œª _ ‚Üí matchAux y l
        matchAuxOne : List Char ‚Üí Parser Char ‚ä§ _
        matchAuxOne [] = fail
        matchAuxOne (x ‚à∑ l) = matchAux x l

bool : Parser Char Bool _
bool = match "true" >>= Œª _ ‚Üí return true
     ‚à£ match "false" >>= Œª _ ‚Üí return false

integerType = match "xsd:integer"
            ‚à£ match "<http://www.w3.org/2001/XMLSchema#integer>"

boolType = match "xsd:boolean"
         ‚à£ match "<http://www.w3.org/2001/XMLSchema#boolean>"

stringType = match "xsd:string"
           ‚à£ match "<http://www.w3.org/2001/XMLSchema#string>"

typeMarker = match "^^"
langMarker = match "@"

dat = tok '"' >>= Œª _ ‚Üí
      dataChar + >>= Œª ds ‚Üí
      tok '"' >>= Œª _ ‚Üí
      return (String.fromList ds)

point = tok '<' >>= Œª _ ‚Üí
        pointChar + >>= Œª ps ‚Üí
        tok '>' >>= Œª _ ‚Üí 
        return (String.fromList ps)

literal = number >>= Œª num ‚Üí
          typeMarker >>= Œª _ ‚Üí
          integerType >>= Œª _ ‚Üí 
          return (n num)
        ‚à£ dat >>= Œª d ‚Üí
          typeMarker >>= Œª _ ‚Üí
          stringType >>= Œª _ ‚Üí 
          return (s d)
        ‚à£ bool >>= Œª d ‚Üí
          typeMarker >>= Œª _ ‚Üí
          boolType >>= Œª _ ‚Üí 
          return (b d)
        ‚à£ dat >>= Œª d ‚Üí
          langMarker >>= Œª _ ‚Üí
          dat >>= Œª _ ‚Üí 
          return (s d)

point‚à£lit = point >>= Œª p ‚Üí 
            return (inj‚ÇÅ p)
          ‚à£ literal >>= Œª l ‚Üí
            return (inj‚ÇÇ l)

triples : Parser Char (String √ó String √ó (String ‚äé D)) _
triples = point >>= Œª p‚ÇÅ ‚Üí
          whitespace >>= Œª _ ‚Üí
          point >>= Œª p‚ÇÇ ‚Üí
          whitespace >>= Œª _ ‚Üí
          point‚à£lit >>= Œª p‚ÇÉ ‚Üí
          return (p‚ÇÅ , p‚ÇÇ , p‚ÇÉ)

ntriples : Parser Char Transitions _
ntriples = triples ‚ãÜ

showTransitions : Transitions ‚Üí String
showTransitions [] = ""
showTransitions ((proj‚ÇÅ , proj‚ÇÇ , inj‚ÇÅ x) ‚à∑ l) = "<" ++ proj‚ÇÅ ++ "> <" ++ proj‚ÇÇ ++ "> <" ++ x ++ ">\n" ++
                                                  showTransitions l 
showTransitions ((proj‚ÇÅ , proj‚ÇÇ , inj‚ÇÇ (n x)) ‚à∑ l) = "<" ++ proj‚ÇÅ ++ "> <" ++ proj‚ÇÇ ++ "> \"" ++ show‚Ñï x ++ "\"^^xsd:integer\n" ++
                                                  showTransitions l 
showTransitions ((proj‚ÇÅ , proj‚ÇÇ , inj‚ÇÇ (b x)) ‚à∑ l) = "<" ++ proj‚ÇÅ ++ "> <" ++ proj‚ÇÇ ++ "> \"" ++ showùîπ x ++ "\"^^xsd:boolean\n" ++
                                                  showTransitions l 
showTransitions ((proj‚ÇÅ , proj‚ÇÇ , inj‚ÇÇ (s x)) ‚à∑ l) = "<" ++ proj‚ÇÅ ++ "> <" ++ proj‚ÇÇ ++ "> " ++ x ++ "@en\n" ++
                                                  showTransitions l  -- 
